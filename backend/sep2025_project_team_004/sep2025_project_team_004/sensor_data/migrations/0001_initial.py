# Generated by Django 5.0.12 on 2025-05-05 05:08

import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="SensorReading",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        db_index=True, default=django.utils.timezone.now
                    ),
                ),
                ("sensor_id", models.CharField(db_index=True, max_length=50)),
                ("temperature", models.FloatField(blank=True, null=True)),
                ("pressure", models.FloatField(blank=True, null=True)),
                ("humidity", models.FloatField(blank=True, null=True)),
                ("vcc", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "sensor_readings",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["sensor_id", "timestamp"],
                        name="sensor_read_sensor__91f5b5_idx",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="WeeklySensorAverage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("sensor_id", models.CharField(max_length=50)),
                ("year", models.IntegerField()),
                ("week_number", models.IntegerField()),
                ("avg_temperature", models.FloatField(blank=True, null=True)),
                ("avg_pressure", models.FloatField(blank=True, null=True)),
                ("avg_humidity", models.FloatField(blank=True, null=True)),
                ("avg_vcc", models.FloatField(blank=True, null=True)),
                ("datapoints", models.PositiveIntegerField(default=0)),
                ("calculation_timestamp", models.DateTimeField()),
            ],
            options={
                "db_table": "weekly_sensor_averages",
                "ordering": ["sensor_id", "year", "week_number"],
                "unique_together": {("sensor_id", "year", "week_number")},
            },
        ),
    ]
